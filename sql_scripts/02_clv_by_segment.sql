-- This query calculates the financial value of each RFM segment.

-- CTE to Perform the full RFM analysis to segment customers.
WITH rfm_analysis AS (
    -- CTE to calculate raw Recency, Frequency, and Monetary values.
    WITH rfm_base AS (
        SELECT
            c.customer_unique_id,
            -- Recency: Days since the last purchase from a fixed analysis date.
            ( (SELECT MAX(order_purchase_timestamp)::DATE + INTERVAL '1 day' FROM orders) - MAX(o.order_purchase_timestamp)::DATE ) AS recency_days,
            -- Frequency: Total number of distinct orders.
            COUNT(DISTINCT o.order_id) AS frequency,
            -- Monetary: Total value of all purchases (price + shipping).
            SUM(oi.price + oi.freight_value) AS monetary
        FROM orders AS o
        INNER JOIN order_items AS oi ON o.order_id = oi.order_id
        INNER JOIN customers AS c ON o.customer_id = c.customer_id
        WHERE o.order_status = 'delivered'
        GROUP BY c.customer_unique_id
    ),
    -- CTE to assign scores (1-4) to each RFM dimension.
    rfm_score AS (
        SELECT
            *,
            NTILE(4) OVER (ORDER BY recency_days ASC) AS r_score,
            NTILE(4) OVER (ORDER BY frequency ASC) AS f_score,
            NTILE(4) OVER (ORDER BY monetary ASC) AS m_score
        FROM rfm_base
    )
    -- Final query to create segments based on RFM scores.
    SELECT
        *,
        CASE
            WHEN r_score >= 3 AND f_score >= 3 THEN 'Champions'
            WHEN r_score >= 3 AND f_score < 3  THEN 'Potential Loyalists'
            WHEN r_score < 3 AND f_score >= 3  THEN 'At Risk'
            WHEN r_score = 2 AND f_score <= 2  THEN 'Needs Attention'
            WHEN r_score = 1 AND f_score <= 2  THEN 'Hibernating'
            ELSE 'Other'
        END AS rfm_segment
    FROM rfm_score
    ORDER BY r_score DESC, f_score DESC
)
-- Final Aggregation: Calculate the total value and size of each segment.
SELECT
    rfm_segment,
    COUNT(customer_unique_id) AS total_customers,
    -- Percentage of total customers in this segment.
    ROUND(COUNT(customer_unique_id) * 100 / (SELECT COUNT(customer_unique_id) FROM rfm_analysis)::NUMERIC, 2) AS pct_customers,
    -- Average historical CLV for a customer in this segment.
    ROUND(AVG(monetary)::NUMERIC, 2) AS avg_clv_per_customer,
    -- Total revenue generated by this entire segment.
    ROUND(SUM(monetary)::NUMERIC, 2) AS total_revenue,
    -- Percentage of total company revenue from this segment.
    ROUND((SUM(monetary) * 100 / (SELECT SUM(monetary) FROM rfm_analysis))::NUMERIC, 2) AS pct_revenue
FROM rfm_analysis
GROUP BY rfm_segment
ORDER BY total_revenue DESC;